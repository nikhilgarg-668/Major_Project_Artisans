{"ast":null,"code":"import axios from \"axios\";\nimport { server } from \"../../server\";\n\n// load user\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: \"LoadUserRequest\"\n    });\n    const {\n      data\n    } = await axios.get(`${server}/user/getuser`, {\n      withCredentials: true\n    });\n    dispatch({\n      type: \"LoadUserSuccess\",\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: \"LoadUserFail\",\n      payload: error.response.data.message\n    });\n  }\n};\n\n// load seller\nexport const loadSeller = () => async dispatch => {\n  try {\n    dispatch({\n      type: \"LoadSellerRequest\"\n    });\n    const {\n      data\n    } = await axios.get(`${server}/shop/getSeller`, {\n      withCredentials: true\n    });\n    dispatch({\n      type: \"LoadSellerSuccess\",\n      payload: data.seller\n    });\n  } catch (error) {\n    dispatch({\n      type: \"LoadSellerFail\",\n      payload: error.response.data.message\n    });\n  }\n};\n\n// user update information\nexport const updateUserInformation = (name, email, phoneNumber, password) => async dispatch => {\n  try {\n    dispatch({\n      type: \"updateUserInfoRequest\"\n    });\n    const {\n      data\n    } = await axios.put(`${server}/user/update-user-info`, {\n      email,\n      password,\n      phoneNumber,\n      name\n    }, {\n      withCredentials: true,\n      headers: {\n        \"Access-Control-Allow-Credentials\": true\n      }\n    });\n    dispatch({\n      type: \"updateUserInfoSuccess\",\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: \"updateUserInfoFailed\",\n      payload: error.response.data.message\n    });\n  }\n};\n\n// update user address\nexport const updatUserAddress = (country, city, address1, address2, zipCode, addressType) => async dispatch => {\n  try {\n    dispatch({\n      type: \"updateUserAddressRequest\"\n    });\n    const {\n      data\n    } = await axios.put(`${server}/user/update-user-addresses`, {\n      country,\n      city,\n      address1,\n      address2,\n      zipCode,\n      addressType\n    }, {\n      withCredentials: true\n    });\n    dispatch({\n      type: \"updateUserAddressSuccess\",\n      payload: {\n        successMessage: \"User address updated succesfully!\",\n        user: data.user\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: \"updateUserAddressFailed\",\n      payload: error.response.data.message\n    });\n  }\n};\n\n// delete user address\nexport const deleteUserAddress = id => async dispatch => {\n  try {\n    dispatch({\n      type: \"deleteUserAddressRequest\"\n    });\n    const {\n      data\n    } = await axios.delete(`${server}/user/delete-user-address/${id}`, {\n      withCredentials: true\n    });\n    dispatch({\n      type: \"deleteUserAddressSuccess\",\n      payload: {\n        successMessage: \"User deleted successfully!\",\n        user: data.user\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: \"deleteUserAddressFailed\",\n      payload: error.response.data.message\n    });\n  }\n};\n\n// get all users --- admin\nexport const getAllUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: \"getAllUsersRequest\"\n    });\n    const {\n      data\n    } = await axios.get(`${server}/user/admin-all-users`, {\n      withCredentials: true\n    });\n    dispatch({\n      type: \"getAllUsersSuccess\",\n      payload: data.users\n    });\n  } catch (error) {\n    dispatch({\n      type: \"getAllUsersFailed\",\n      payload: error.response.data.message\n    });\n  }\n};","map":{"version":3,"names":["axios","server","loadUser","dispatch","type","data","get","withCredentials","payload","user","error","response","message","loadSeller","seller","updateUserInformation","name","email","phoneNumber","password","put","headers","updatUserAddress","country","city","address1","address2","zipCode","addressType","successMessage","deleteUserAddress","id","delete","getAllUsers","users"],"sources":["F:/diwakar/Major_Project_Artisans/frontend/src/redux/actions/user.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { server } from \"../../server\";\r\n\r\n// load user\r\nexport const loadUser = () => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: \"LoadUserRequest\",\r\n    });\r\n    const { data } = await axios.get(`${server}/user/getuser`, {\r\n      withCredentials: true,\r\n    });\r\n    dispatch({\r\n      type: \"LoadUserSuccess\",\r\n      payload: data.user,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: \"LoadUserFail\",\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};\r\n\r\n// load seller\r\nexport const loadSeller = () => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: \"LoadSellerRequest\",\r\n    });\r\n    const { data } = await axios.get(`${server}/shop/getSeller`, {\r\n      withCredentials: true,\r\n    });\r\n    dispatch({\r\n      type: \"LoadSellerSuccess\",\r\n      payload: data.seller,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: \"LoadSellerFail\",\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};\r\n\r\n// user update information\r\nexport const updateUserInformation =\r\n  (name, email, phoneNumber, password) => async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: \"updateUserInfoRequest\",\r\n      });\r\n\r\n      const { data } = await axios.put(\r\n        `${server}/user/update-user-info`,\r\n        {\r\n          email,\r\n          password,\r\n          phoneNumber,\r\n          name,\r\n        },\r\n        {\r\n          withCredentials: true,\r\n          headers: {\r\n            \"Access-Control-Allow-Credentials\": true,\r\n          },\r\n        }\r\n      );\r\n\r\n      dispatch({\r\n        type: \"updateUserInfoSuccess\",\r\n        payload: data.user,\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: \"updateUserInfoFailed\",\r\n        payload: error.response.data.message,\r\n      });\r\n    }\r\n  };\r\n\r\n// update user address\r\nexport const updatUserAddress =\r\n  (country, city, address1, address2, zipCode, addressType) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: \"updateUserAddressRequest\",\r\n      });\r\n\r\n      const { data } = await axios.put(\r\n        `${server}/user/update-user-addresses`,\r\n        {\r\n          country,\r\n          city,\r\n          address1,\r\n          address2,\r\n          zipCode,\r\n          addressType,\r\n        },\r\n        { withCredentials: true }\r\n      );\r\n\r\n      dispatch({\r\n        type: \"updateUserAddressSuccess\",\r\n        payload: {\r\n          successMessage: \"User address updated succesfully!\",\r\n          user: data.user,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: \"updateUserAddressFailed\",\r\n        payload: error.response.data.message,\r\n      });\r\n    }\r\n  };\r\n\r\n// delete user address\r\nexport const deleteUserAddress = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: \"deleteUserAddressRequest\",\r\n    });\r\n\r\n    const { data } = await axios.delete(\r\n      `${server}/user/delete-user-address/${id}`,\r\n      { withCredentials: true }\r\n    );\r\n\r\n    dispatch({\r\n      type: \"deleteUserAddressSuccess\",\r\n      payload: {\r\n        successMessage: \"User deleted successfully!\",\r\n        user: data.user,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: \"deleteUserAddressFailed\",\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};\r\n\r\n// get all users --- admin\r\nexport const getAllUsers = () => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: \"getAllUsersRequest\",\r\n    });\r\n\r\n    const { data } = await axios.get(`${server}/user/admin-all-users`, {\r\n      withCredentials: true,\r\n    });\r\n\r\n    dispatch({\r\n      type: \"getAllUsersSuccess\",\r\n      payload: data.users,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: \"getAllUsersFailed\",\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}